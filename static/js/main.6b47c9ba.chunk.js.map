{"version":3,"sources":["jsdos/JsDos.tsx","core/ZipExplorer.ts","dashboard/Dashboard.tsx","serviceWorker.ts","index.tsx"],"names":["require","Dos","window","JsDos","props","ref","useRef","_useState","useState","_useState2","Object","slicedToArray","style","setStyle","console","log","args","useEffect","ciPromise","current","wdosboxUrl","then","runtime","fs","extract","url","main","ci","exit","react_default","a","createElement","resizeSensor","onResize","entries","length","canvas","maxWidth","innerWidth","maxHeight","contentRect","height","aspect","width","newHeight","newWidth","left","top","className","ZipExecutables","zipBlob","Promise","resolve","reject","outcome","zip","createReader","BlobReader","reader","getEntries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","filename","value","toLocaleLowerCase","endsWith","push","err","return","close","e","Dashboard","error","setError","_useState3","_useState4","setReader","_useState5","_useState6","loadProgress","setLoadProgress","_useState7","_useState8","_setUrl","_useState9","_useState10","executables","setExecutables","_useState11","_useState12","executable","setExecutable","_useState13","_useState14","argsLine","setArgsLine","_useState15","_useState16","ready","setReady","fileName","parts","split","newArgs","forEach","part","index","join","setUrl","newUrl","URL","revokeObjectURL","chooseFileControl","color","fontWeight","borderBottom","href","dist_default","flexDirection","fileInput","disabled","text","onInputChange","files","currentTarget","file","FileReader","addEventListener","_ref","asyncToGenerator","regenerator_default","mark","_callee","blob","_files","_url","nodes","wrap","_context","prev","Blob","Uint8Array","result","sent","createObjectURL","id","label","icon","IconNames","PLAY","t0","finish","t1","stop","_x","apply","this","arguments","loaded","total","readAsArrayBuffer","spinner","size","intent","Intent","PRIMARY","display","executablesControl","tree","Classes","ELEVATION_1","contents","onNodeClick","node","argsControl","buttonGroup","INPUT","onChange","buttons","DANGER","onClick","jsdos","src_jsdos_JsDos","map","arg","trim","substr","html","flexGrow","Boolean","location","hostname","match","ReactDOM","render","src_dashboard_Dashboard","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.6b47c9ba.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { DosFactory } from \"js-dos\";\n\nimport \"./JsDos.css\";\nimport { ResizeSensor, IResizeEntry } from \"@blueprintjs/core\";\n\nrequire(\"js-dos\");\nconst Dos = (window as any).Dos as DosFactory;\n\nexport interface IJsDosProps {\n    url: string;\n    args: string[];\n}\n\nconst JsDos = (props: IJsDosProps) => {\n    const ref = useRef<HTMLCanvasElement>(null);\n    const [style, setStyle] = useState<React.CSSProperties>({});\n    console.log(\"ARGS!\", props.args);\n\n    useEffect(() => {\n        if (ref !== null) {\n            const ciPromise = Dos(ref.current as HTMLCanvasElement, {\n                wdosboxUrl: \"/wdosbox/wdosbox.js\",\n            }).then((runtime) => {\n                return runtime.fs.extract(props.url).then(() => {\n                    return runtime.main(props.args);\n                });\n            });\n\n            return () => {\n                ciPromise.then(ci => ci.exit());\n            };\n        }\n    }, [ref, props.url, props.args]);\n\n    function onResize(entries: IResizeEntry[]) {\n        if (entries.length > 0) {\n            const canvas = ref.current as HTMLCanvasElement;\n            const maxWidth = window.innerWidth;\n            const maxHeight = entries[entries.length - 1].contentRect.height;\n\n            const width = canvas.width;\n            const height = canvas.height;\n\n            const aspect = width / height;\n\n            let newHeight = maxHeight;\n            let newWidth = aspect * newHeight;\n            \n            if (newWidth > maxWidth) {\n                newWidth = maxWidth;\n                newHeight = newWidth / aspect;\n            }\n\n            setStyle({\n                left: ((maxWidth - newWidth)) / 2 + \"px\",\n                top: ((maxHeight - newHeight)) / 2 + \"px\",\n                width: newWidth + \"px\",\n                height: newHeight + \"px\",\n            });\n        }\n    };\n\n    return <ResizeSensor onResize={onResize}>\n        <div className=\"jsdos-resize-sensor\">\n            <div style={style} className=\"jsdos-viewport\">\n                <canvas  className=\"js-dos-canvas\" ref={ref} />\n            </div>\n        </div>\n    </ResizeSensor>;\n}\n\nexport default JsDos;","declare const zip: any;\n\nexport default function ZipExecutables(zipBlob: Blob) {\n    return new Promise<string[]>((resolve, reject) => {\n        const outcome: string[] = [];\n        zip.createReader(new zip.BlobReader(zipBlob), (reader: any) => {\n            reader.getEntries((entries: any) => {\n                for (const entry of entries) {\n                    const filename: string = entry.filename;\n                    if (filename.toLocaleLowerCase().endsWith(\".com\") || \n                        filename.toLocaleLowerCase().endsWith(\".exe\") ||\n                        filename.toLocaleLowerCase().endsWith(\".bat\")) {\n                        outcome.push(filename);\n                        break;\n                    }\n                }\n\n                reader.close();\n                resolve(outcome);\n            });\n        }, (e: any) => {\n            reject(\"Can't read ZIP file: \" + e);\n        });\n    });\n\n}","import { FileInput, Intent, H1, H3, Spinner, Tree, ITreeNode, Classes, Button, ButtonGroup, H4 } from \"@blueprintjs/core\";\n\nimport React, { useState, useEffect } from \"react\";\nimport JsDos from \"../jsdos/JsDos\";\n\nimport Flexbox from 'flexbox-react';\nimport \"./Dashboard.css\";\nimport ZipExecutables from \"../core/ZipExplorer\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\n\nconst Dashboard: React.FC = () => {\n    const [error, setError] = useState<string>(\"\");\n    const [reader, setReader] = useState<FileReader|null>(null);\n    const [loadProgress, setLoadProgress] = useState<number>(0);\n    const [url, _setUrl] = useState<string | null>(null);\n\n    const [executables, setExecutables] = useState<ITreeNode[]>([]);\n    const [executable, setExecutable] = useState<string | null>(null);\n    const [argsLine, setArgsLine] = useState<string | null>(null);\n\n    const [ready, setReady] = useState<boolean>(false);\n\n    useEffect(() => {\n        const fileName = executable;\n\n        if (fileName === null) {\n            return;\n        }\n\n        if (fileName.length === 0 || fileName === \"N/A\") {\n            setArgsLine(\"\");\n            return;\n        }\n\n        const parts = fileName.split(\"/\");\n        const newArgs: string[] = [];\n        parts.forEach((part, index) => {\n            newArgs.push(\"\\\"-c\\\"\");\n            if (index < parts.length - 1) {\n                newArgs.push(\"\\\"cd \" + part + \"\\\"\");\n            } else {\n                newArgs.push(\"\\\"\" + part + \"\\\"\");\n            }\n        });\n        setArgsLine(newArgs.join(\", \"));\n    }, [executable]);\n    \n    const setUrl = (newUrl: string) => {\n        if (url !== null) {\n            URL.revokeObjectURL(url);\n        }\n\n        _setUrl(newUrl);\n    }\n\n    function onInputChange(e: any) {\n        const files = e.currentTarget.files as FileList;\n        if (files.length === 0) {\n            setReader(null);\n            return;\n        }\n\n        setError(\"\");\n\n        const file = files[0];\n        var reader = new FileReader();\n        reader.addEventListener('load', async (e) => {\n            const blob = new Blob([new Uint8Array(reader.result as ArrayBuffer)]);\n            try {\n                const files = await ZipExecutables(blob);\n                const url = URL.createObjectURL(blob);\n                setUrl(url);\n                \n\n                if (files.length === 1) {\n                    setExecutable(files[0])\n                } else if (files.length === 0) {\n                    setExecutable(\"N/A\");\n                } else {\n                    const nodes: ITreeNode[] = [];\n                    for (const next of files) {\n                        nodes.push({\n                            id: next,\n                            label: next,\n                            icon: IconNames.PLAY,\n                        });\n                    }\n                    setExecutables(nodes);\n                }\n            } catch (e) {\n                setError(e);\n                setReader(null);\n                setLoadProgress(0);\n            }\n        });\n        reader.addEventListener('progress', (e) => setLoadProgress(e.loaded / e.total));\n        reader.readAsArrayBuffer(file);\n        setReader(reader);\n    }\n\n    const chooseFileControl = <li>Upload \n        &nbsp;\n        <span style={{color: \"#D9822B\", fontWeight: \"bold\", borderBottom: \"2px solid #DB3737\"}}>ZIP</span>\n        &nbsp;\n        archive of program (try&nbsp;<a href=\"/digger.zip\">digger.zip</a>)\n        <Flexbox className=\"instructions-control\" flexDirection=\"row\">\n            <FileInput disabled={reader !== null} text=\"Choose file...\" onInputChange={onInputChange} />\n            &nbsp;&nbsp;\n            <Spinner size={16} intent={Intent.PRIMARY} value={loadProgress} />\n        </Flexbox>\n        <span style={{color: \"#DB3737\", display: (error.length === 0 ? \"none\" : \"block\") }}>*&nbsp;{error}</span>\n    </li>;\n\n    const executablesControl = <li style={(executables.length === 0 && executable === null) ? {display: \"none\"} : {}}>\n        Select executable:\n        <div style={executable === null ? {} : {display: \"none\"}} className=\"instructions-control\">\n            <Tree className={Classes.ELEVATION_1} contents={executables} onNodeClick={(node) => setExecutable(node.id + \"\")} />\n        </div>\n        <div style={executable === null ? {display: \"none\"} : {}} className=\"instructions-control\">\n            <span style={{color: \"#D9822B\", fontWeight: \"bold\"}}>{executable}</span>\n        </div>\n    </li>;\n\n    const argsControl = <li style={argsLine === null ? {display: \"none\"} : {}}>\n        Check command line and \n        &nbsp;\n        <span style={{color: \"#D9822B\", fontWeight: \"bold\", borderBottom: \"2px solid #DB3737\"}}>RUN</span>\n        &nbsp;\n        <ButtonGroup className=\"instructions-control\">\n            <input className={Classes.INPUT} value={argsLine + \"\"} onChange={(e) => setArgsLine(e.currentTarget.value)} />\n            <Button intent={Intent.DANGER} text=\"Run\" onClick={() => setReady(true)} />\n        </ButtonGroup>\n    </li>;\n\n    const jsdos = ready ?\n        <JsDos url={url + \"\"} args={(argsLine + \"\").split(\", \").map((arg) => arg.trim().substr(1, arg.length - 2))}/> :\n        <div></div>;\n\n    return <Flexbox flexDirection=\"column\" className=\"dashboard\" style={ready ? {width: \"100%\"} : {}}>\n        <H1>Dosify&nbsp;me!</H1>\n        <H4>Try&nbsp;your&nbsp;favorite&nbsp;DOS&nbsp;game&nbsp;in&nbsp;browser</H4>\n        <div style={ready ? {display: \"none\"} : {}}>\n            <p>Instructions</p>\n            <ol className=\"instructions-ol\">\n                {chooseFileControl}\n                {executablesControl}\n                {argsControl}\n            </ol>\n        </div>\n        <Flexbox flexGrow={1} flexDirection=\"column\" style={ready ? {} : {display: \"none\"}}>\n            <H3>Now <span style={{color: \"#D9822B\", fontWeight: \"bold\", borderBottom: \"2px solid #DB3737\"}}>PLAY!</span></H3>\n            {jsdos}\n        </Flexbox>\n    </Flexbox>;\n};\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dashboard from \"./dashboard/Dashboard\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nReactDOM.render(<Dashboard />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}